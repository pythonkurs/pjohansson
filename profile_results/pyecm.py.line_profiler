Timer unit: 1e-06 s

File: pyecm.py
Function: invert at line 76
Total time: 0.827764 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@profile
    77                                           	def invert(a, b):
    78                                           		'''Computes the inverse of a modulo b. b must be odd.
    79                                           
    80                                           Returns the inverse of a (mod b).'''
    81       180          874      4.9      0.1  		if a == 0 or b == 0:
    82                                           			return 0
    83                                           
    84       180          466      2.6      0.1  		truth = False
    85       180          496      2.8      0.1  		if a < 0:
    86                                           			truth = True
    87                                           			a = -a
    88                                           
    89       180          405      2.2      0.0  		b_orig = b
    90       180          402      2.2      0.0  		alpha = 1
    91       180          378      2.1      0.0  		beta = 0
    92                                           
    93       338         1133      3.4      0.1  		while not a & 1:
    94       158          471      3.0      0.1  			if alpha & 1:
    95       150          479      3.2      0.1  				alpha += b_orig
    96       158          488      3.1      0.1  			alpha >>= 1
    97       158          438      2.8      0.1  			a >>= 1
    98                                           
    99       180          472      2.6      0.1  		if b > a:
   100       180          444      2.5      0.1  			a, b = b, a
   101       180          453      2.5      0.1  			alpha, beta = beta, alpha
   102                                           
   103     19953        58250      2.9      7.0  		while b != 0 and a != b:
   104     19773        51719      2.6      6.2  			a -= b
   105     19773        51420      2.6      6.2  			alpha -= beta
   106                                           
   107     58986       170634      2.9     20.6  			while not a & 1:
   108     39213       108055      2.8     13.1  				if alpha & 1:
   109     19708        53792      2.7      6.5  					alpha += b_orig
   110     39213       115212      2.9     13.9  				alpha >>= 1
   111     39213       106793      2.7     12.9  				a >>= 1
   112                                           
   113     19773        49153      2.5      5.9  			if b > a:
   114     10583        25985      2.5      3.1  				a,b = b,a
   115     10583        25587      2.4      3.1  				alpha, beta = beta, alpha
   116                                           
   117       180          474      2.6      0.1  		if a == b:
   118       180          506      2.8      0.1  			a -= b
   119       180          496      2.8      0.1  			alpha -= beta
   120       180          451      2.5      0.1  			a, b = b, a
   121       180          485      2.7      0.1  			alpha, beta = beta, alpha
   122                                           
   123       180          501      2.8      0.1  		if a != 1:
   124         1            2      2.0      0.0  			return 0
   125                                           
   126       179          419      2.3      0.1  		if truth:
   127                                           			alpha = b_orig - alpha
   128                                           
   129       179          431      2.4      0.1  		return alpha

File: pyecm.py
Function: double at line 431
Total time: 2.5094 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   431                                           @profile
   432                                           def double(p, n):
   433                                           	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                                           
   435                                           Returns the doubled list.'''
   436       172         1562      9.1      0.1  	inv = range(len(p))
   437                                           
   438     15996        37143      2.3      1.5  	for i in xrange(len(p)):
   439     15824        54674      3.5      2.2  		inv[i] = p[i][1] << 1
   440                                           
   441       172      1999441  11624.7     79.7  	inv = parallel_invert(inv, n)
   442                                           
   443       172          900      5.2      0.0  	if not isinstance(inv, list):
   444                                           		return inv
   445                                           
   446     15996        37690      2.4      1.5  	for i in xrange(len(p)):
   447     15824        43269      2.7      1.7  		x = p[i][0]
   448     15824        67034      4.2      2.7  		m = (x * x) % n
   449     15824        87162      5.5      3.5  		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450     15824        80609      5.1      3.2  		p[i][0] = (m * m - x - x) % n
   451     15824        99496      6.3      4.0  		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                                           
   453       172          422      2.5      0.0  	return p

File: pyecm.py
Function: parallel_invert at line 538
Total time: 1.8569 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   538                                           @profile
   539                                           def parallel_invert(l, n):
   540                                           	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                                           
   542                                           Returns the list with all elements inverted modulo 3(n-1).'''
   543       180         1017      5.7      0.1  	l_ = l[:]
   544     16560        37103      2.2      2.0  	for i in xrange(len(l)-1):
   545     16380        83144      5.1      4.5  		l[i+1] = (l[i] * l[i+1]) % n
   546                                           
   547       180      1549408   8607.8     83.4  	inv = invert(l[-1], n)
   548       180          566      3.1      0.0  	if inv == 0:
   549         1         1277   1277.0      0.1  		return gcd(l[-1], n)
   550                                           
   551     16468        37694      2.3      2.0  	for i in xrange(len(l)-1, 0, -1):
   552     16289        76181      4.7      4.1  		l[i] = (inv * l[i-1]) % n
   553     16289        69635      4.3      3.8  		inv = (inv * l_[i]) % n
   554       179          478      2.7      0.0  	l[0] = inv
   555                                           
   556       179          393      2.2      0.0  	return l

